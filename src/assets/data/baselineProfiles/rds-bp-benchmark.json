{
  "name": "rds-bp-benchmark",
  "summary": "An InSpec Compliance Profile for AWS RDS best practices",
  "version": "0.1.0",
  "inspec_version": "~> 4",
  "depends": [
    {
      "name": "inspec-aws",
      "url": "https://github.com/inspec/inspec-aws/archive/master.tar.gz",
      "status": "loaded"
    }
  ],
  "supports": [
    {
      "platform": "aws"
    }
  ],
  "inputs": [],
  "controls": [
    {
      "title": "instance exists",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'instance' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'instance exists'\n  describe aws_rds_instance(input('rds_name')) do\n    it { should exist }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 3
      },
      "id": "instance"
    },
    {
      "title": "is instance publicly accessable",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'public' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'is instance publicly accessable'\n  describe aws_rds_instance(input('rds_name')) do\n    its('publicly_accessible') { should eq input('rds_publicly_accessible') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 13
      },
      "id": "public"
    },
    {
      "title": "engine type",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'rdms' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'engine type'\n  describe aws_rds_instance(input('rds_name')) do\n    its('engine') { should eq input('rds_engine') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 23
      },
      "id": "rdms"
    },
    {
      "title": "auto upgrades",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'upgrades' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'auto upgrades'\n  describe aws_rds_instance(input('rds_name')) do\n    its('auto_minor_version_upgrade') { should eq input('rds_auto_minor_version_upgrade') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 33
      },
      "id": "upgrades"
    },
    {
      "title": "deletion protection",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'protection' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'deletion protection'\n  describe aws_rds_instance(input('rds_name')) do\n    its('deletion_protection') { should eq input('rds_deletion_protection') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 43
      },
      "id": "protection"
    },
    {
      "title": "iam authentication",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'authentication' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'iam authentication'\n  describe aws_rds_instance(input('rds_name')) do\n    its('iam_database_authentication_enabled') { should eq input('rds_iam_database_authentication_enabled') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 53
      },
      "id": "authentication"
    },
    {
      "title": "performance monitoring",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'metrics' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'performance monitoring'\n  describe aws_rds_instance(input('rds_name')) do\n    its('performance_insights_enabled') { should eq input('rds_performance_insights_enabled') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 63
      },
      "id": "metrics"
    },
    {
      "title": "has terraform created tags",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'tags' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'has terraform created tags'\n  describe aws_rds_instance(input('rds_name')) do\n    its('tags') { should include('Terraform' => 'true') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/configuration.rb",
        "line": 73
      },
      "id": "tags"
    },
    {
      "title": "instance port is not default",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'instance port' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'instance port is not default'\n  describe aws_rds_instance(input('rds_name')) do\n    its('db_instance_port') { should_not eq rds_helper.default_port(input('rds_engine')) }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/network.rb",
        "line": 3
      },
      "id": "instance port"
    },
    {
      "title": "security_group assigned",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'security_group' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'security_group assigned'\n  describe aws_rds_instance(input('rds_name')) do\n    its('vpc_security_groups.first.vpc_security_group_id') { should eq rds_helper.get_security_group_id(input('rds_securitygroup'), input('aws_region')) }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/network.rb",
        "line": 13
      },
      "id": "security_group"
    },
    {
      "title": "instance has HA",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'multi_az' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'instance has HA'\n  describe aws_rds_instance(input('rds_name')) do\n    its('multi_az') { should eq input('rds_multi_az') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/network.rb",
        "line": 23
      },
      "id": "multi_az"
    },
    {
      "title": "storage encrypted is on",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'encrypted storage' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'storage encrypted is on'\n  describe aws_rds_instance(input('rds_name')) do\n    its('storage_encrypted') { should eq input('rds_storage_encrypted') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/storage.rb",
        "line": 3
      },
      "id": "encrypted storage"
    },
    {
      "title": "necessary allocated storage provided",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'allocated_storage' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'necessary allocated storage provided'\n  describe aws_rds_instance(input('rds_name')) do\n    its('allocated_storage') { should eq input('rds_allocated_storage') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/storage.rb",
        "line": 13
      },
      "id": "allocated_storage"
    },
    {
      "title": "tags are copied to snapshots",
      "desc": null,
      "descriptions": {},
      "impact": 0.5,
      "refs": [],
      "tags": {
        "nist": [
          "CM-6"
        ],
        "severity": "medium"
      },
      "code": "control 'snapshot tags' do\n  impact 0.5\n  tag nist: ['CM-6']\n  tag severity: 'medium'\n  title 'tags are copied to snapshots'\n  describe aws_rds_instance(input('rds_name')) do\n    its('copy_tags_to_snapshot') { should eq input('rds_copy_tags_to_snapshot') }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS BP Benchmark/controls/storage.rb",
        "line": 23
      },
      "id": "snapshot tags"
    }
  ],
  "groups": [
    {
      "title": "RDS - Best Practice - Configuration",
      "controls": [
        "instance",
        "public",
        "rdms",
        "upgrades",
        "protection",
        "authentication",
        "metrics",
        "tags"
      ],
      "id": "controls/configuration.rb"
    },
    {
      "title": "RDS - Best Practice - Network",
      "controls": [
        "instance port",
        "security_group",
        "multi_az"
      ],
      "id": "controls/network.rb"
    },
    {
      "title": "RDS - Best Practice - Storage",
      "controls": [
        "encrypted storage",
        "allocated_storage",
        "snapshot tags"
      ],
      "id": "controls/storage.rb"
    }
  ],
  "sha256": "098da8108d4c872701263f135ee5d40385e35edd9457567b44b9e25b75d1a614",
  "status_message": "",
  "status": "loaded",
  "generator": {
    "name": "inspec",
    "version": "4.33.1"
  }
}